import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {
    static int n, m, t;
    static int[][] arr;
    static boolean[][] visit3;
    static int[] dx = {1, 0, 0, -1};
    static int[] dy = {0, 1, -1, 0};
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        arr = new int[n][m];
        t = 0;
        for(int i = 0; i < n; i++){
            String str[] = br.readLine().split(" ");
            for(int j = 0; j < m; j++){
                arr[i][j] = Integer.parseInt(str[j]);
            }
        }
        visit3 = new boolean[n][m];
        bfs();
        System.out.println(t);
    }
    public static void bfs(){
        int zero = 0;
        while(n * m != zero) {
            zero = 0;
            emptyPossibility();
            cheeze();
            t++;
            for(int i = 0; i < n; i++){
                for(int j = 0; j < m; j++){
                    if(arr[i][j] == 3)
                        arr[i][j] = 5;
                    if(arr[i][j] == 1)
                        continue;
                    if(arr[i][j] == 5 || arr[i][j] == 0){
                        zero++;
                    }
                }
            }
        }
    }
    public static void range(int x, int y){
        int z = 0;
        for(int i = 0; i < 4; i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            if(nx < 0 || ny < 0 || nx >= n || ny >= m)
                continue;
            if(arr[nx][ny] == 5)
                z++;
        }
        if(z >= 2)
            arr[x][y] = 3;
    }
    public static void cheeze(){
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(arr[i][j] == 1){
                    range(i,j);
                }
            }
        }
    }
    public static void emptyPossibility(){
        visit3 = new boolean[n][m];
        Queue<Point> empty = new LinkedList<>();
        empty.offer(new Point(0,0));
        while (!empty.isEmpty()) {
            Point now = empty.poll();
            for(int i = 0; i < 4; i++){
                int nx = now.x + dx[i];
                int ny = now.y + dy[i];
                if(nx >= n || ny >= m || nx < 0 || ny < 0)
                    continue;
                if(visit3[nx][ny])
                    continue;
                if(arr[nx][ny] == 0 || arr[nx][ny] == 5){
                    visit3[nx][ny] = true;
                    arr[nx][ny] = 5;
                    empty.offer(new Point(nx, ny));
                }
            }
        }
    }
}
class Point{
    int x;
    int y;
    Point(int x, int y){
        this.x = x;
        this.y = y;
    }
}
