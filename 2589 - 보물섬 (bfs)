import java.awt.*;
import java.util.*;
public class Main{
    static int n, m;
    static int[][] arr;
    static int[] dx = {1,0,0,-1};
    static int[] dy = {0,-1,1,0};
    static boolean[][] visit;
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        n = scan.nextInt();
        m = scan.nextInt();
        arr = new int[n][m];
        visit = new boolean[n][m];
        for(int i = 0; i < n; i++){
            String str = scan.next();
            for(int j = 0; j < m; j++){
                if(str.charAt(j) == 'L')
                    arr[i][j] = 1;
                else
                    arr[i][j] = 0;
            }
        }
        int result = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(arr[i][j] == 1) {
                    visit = new boolean[n][m];
                    int val = value(i, j, 0);
                    result = Math.max(result, val);
                }
            }
        }
        System.out.println(result);
    }
    public static int value(int x, int y, int cnt){
        visit[x][y] = true;
        int val = 0;
        LinkedList<Point> queue = new LinkedList<>();
        queue.offer(new Point(x,y,0));
        while (!queue.isEmpty()) {
            Point now = queue.poll();
            for(int i = 0; i < 4; i++){
                int nx = now.x + dx[i];
                int ny = now.y + dy[i];
                if(nx < 0 || ny < 0 || nx >= n || ny >= m){
                    continue;
                }
                if(arr[nx][ny] == 1 && visit[nx][ny] == false){
                    visit[nx][ny] = true;
                    queue.offer(new Point(nx,ny,now.cnt+1));
                    val = Math.max(val,now.cnt+1);
                }
            }
        }
        return val;
    }
    public static class Point{
        int x;
        int y;
        int cnt;
        public Point(int x, int y, int cnt){
            this.x = x;
            this.y = y;
            this.cnt = cnt;
        }
    }
}
