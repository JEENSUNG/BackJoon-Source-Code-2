
import java.util.*;

public class Main {
    static int node;
    static int n, answer;
    static int arr[][];
    static boolean[] visit;
    static int[] ans;
    static int[] pp;

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        node = scan.nextInt();
        n = scan.nextInt();
        arr = new int[node + 1][node + 1];
        pp = new int[node + 1];
        for (int i = 1; i <= n; i++) {
            int a = scan.nextInt();
            int b = scan.nextInt();
            arr[a][b] = arr[b][a] = 1;
        }
        int po = 0;
        int min = Integer.MAX_VALUE;
        for (int i = 1; i <= node; i++) {
            int sum = 0;
            for (int j = 1; j <= node; j++) {
                if (i != j) {
                    visit = new boolean[node + 1];
                    ans = new int[node + 1];
                    sum += bfs(i, j, 0);
                }
            }
            if(sum < min){
                po = i;
                min = Math.min(min, sum);
            }
        }
        System.out.println(po);
    }
    public static int bfs(int x, int y, int cnt) {
        Queue<Integer> queue =  new LinkedList<>();
        ArrayList<Integer> list = new ArrayList<>();
        queue.offer(x);
        visit[x] = true;
        while (!queue.isEmpty()) {
            int now = queue.poll();
            for(int i = 1; i <= node; i++){
                if(arr[now][i] == 1 && visit[i] == false)
                    list.add(i);
            }
            Iterator<Integer> iter = list.iterator();
            while(iter.hasNext()){
                int next = iter.next();
                if(!visit[next]){
                    ans[next] = ans[now]+ 1;
                    if(next == y){
                        return ans[next];
                    }
                    visit[next] = true;
                    queue.offer(next);
                }
            }
        }
        return 0;
    }
}
