
import java.util.*;
public class Main {
    static int n, m;
    static int dx[] = {1, 0, 0, -1};
    static int dy[] = {0, 1, -1, 0};
    static boolean[][] visit;
    static int arr[][];
    static int melt[][];
    static int count = 0;

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        n = scan.nextInt();
        m = scan.nextInt();
        arr = new int[n][m];
        melt = new int[n][m];
        visit = new boolean[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                arr[i][j] = scan.nextInt();
            }
        }
        int year = 0;
        while (true) {
            count = 0;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    if (visit[i][j] == false && arr[i][j] != 0) {
                        dfs(i, j);
                        count++;
                    }
                }
            }
            if (count == 0) {
                System.out.println(0);
                break;
            } else if (count >= 2) {
                System.out.println(year);
                break;
            }
            melt();
            year++;
        }
    }
    public static void dfs(int x, int y){
        visit[x][y] = true;
        for(int i = 0; i < 4; i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            if(nx < 0 || ny < 0 || nx >= n || ny >= m){
                continue;
            }
            if(arr[nx][ny] == 0){
                melt[x][y]++;
            }
            if(visit[nx][ny] == false && arr[nx][ny] != 0){
                dfs(nx,ny);
            }
        }
    }
    public static void melt(){
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                arr[i][j] = arr[i][j] - melt[i][j];
                if(arr[i][j] < 0){
                    arr[i][j] = 0;
                }
                visit[i][j] = false;
                melt[i][j] = 0;
            }
        }
    }
}
