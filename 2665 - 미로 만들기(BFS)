import java.awt.*;
import java.util.*;
public class Main {
    static int n;
    static int[][] arr;
    static int[][] visit;
    static int[] dx = {-1,0,1,0};
    static int[] dy = {0,1,0,-1};
    static int cnt;
    static int min;
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        n = scan.nextInt();

        arr = new int[n][n];
        visit = new int[n][n];

        for(int i = 0; i < n; i++){
            String str = scan.next();
            for(int j = 0; j < n; j++){
                arr[i][j] = str.charAt(j) - 48;
                visit[i][j] = Integer.MAX_VALUE;
            }
        }

        bfs(0,0);
        System.out.println(visit[n-1][n-1]);
    }
    public static void bfs(int x, int y){
        Queue<Point> queue =new LinkedList<>();
        queue.offer(new Point(x,y));
        visit[0][0] = 0;
        while (!queue.isEmpty()) {
            Point now = queue.poll();
            for(int i = 0; i < 4; i++){
                int nx = now.x + dx[i];
                int ny = now.y + dy[i];
                if(nx < 0 || ny < 0 || ny >= n || nx >= n){
                    continue;
                }
                if(visit[nx][ny] <= visit[now.x][now.y]){
                    continue;
                }
                if(arr[nx][ny] == 1){
                    queue.offer(new Point(nx,ny));
                    visit[nx][ny] = visit[now.x][now.y];
                }
                else{
                    queue.offer(new Point(nx,ny));
                    visit[nx][ny] = visit[now.x][now.y] + 1;
                }
            }
        }
    }
}
