import java.awt.*;
import java.util.*;
public class Main{
    static int n,m;
    static int[] dx = {0, 1, 0, -1};
    static int[] dy = {1, 0, -1, 0};
    static int[][] arr;
    static boolean[][] visit2;
    static boolean[][] visit;
    static int num = 1;
    static int min = Integer.MAX_VALUE;
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        n = scan.nextInt();
        arr = new int[n][n];
        visit = new boolean[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                arr[i][j] = scan.nextInt();
            }
        }
        visit2 = new boolean[n][n];
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++) {
                if(arr[i][j] > 0 && visit2[i][j] == false)
                    search(i, j);
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if(arr[i][j] > 0) {
                    visit = new boolean[n][n];
                    int t = bfs(i,j);
                    if(t > 0)
                        min = Math.min(min, t);
                }
            }
        }
        System.out.println(min);
    }
    public static void search(int x, int y) {
        Queue<Point> queue2 = new LinkedList<>();
        queue2.offer(new Point(x, y));
        visit2[x][y] = true;
        arr[x][y] = num;
        while (!queue2.isEmpty()) {
            Point now = queue2.poll();
            for(int i = 0; i < 4; i++){
                int nx = now.x + dx[i];
                int ny = now.y + dy[i];
                if(nx < 0 || ny < 0 || nx >= n || ny >= n)
                    continue;
                if(visit2[nx][ny] != false)
                    continue;
                if(arr[nx][ny] > 0){
                    queue2.offer(new Point(nx, ny));
                    visit2[nx][ny] = true;
                    arr[nx][ny] = num;
                }
            }
        }
        num++;
    }
    public static int bfs(int x, int y) {
        Queue<Points> queue = new LinkedList<>();
        visit[x][y] = true;
        queue.offer(new Points(x, y,0));
        while (!queue.isEmpty()) {
            Points now = queue.poll();
            for (int i = 0; i < 4; i++) {
                int nx = now.x + dx[i];
                int ny = now.y + dy[i];
                if(nx < 0 || ny < 0 || nx >= n || ny >= n)
                    continue;
                if (visit[nx][ny] != false) {
                    continue;
                }
                visit[nx][ny] = true;
                if(arr[nx][ny] != arr[x][y])
                    continue;
                if(arr[nx][ny] == 0) {
                    queue.offer(new Points(nx, ny, now.cnt + 1));
                }
                else
                    return now.cnt;
            }
        }
        return 0;
    }
}
class Points{
    int x;
    int y;
    int cnt;
    public Points(int x, int y, int cnt){
        this.x = x;
        this.y = y;
        this.cnt = cnt;
    }
}
