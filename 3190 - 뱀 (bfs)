package com.board.dream;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main{
    static int n,m,t;
    static int[][] arr;
    static boolean [][] visit;
    static int dx[] = {1,0,0,-1};
    static int dy[] = {0,1,-1,0};
    static HashMap<Integer, Character> map;
    static int length = 0;
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        n = scan.nextInt();
        m = scan.nextInt();
        arr = new int[n+1][n+1];
        visit = new boolean[n+1][n+1];
        while (m-- > 0) {
            int x = scan.nextInt();
            int y = scan.nextInt();
            arr[x][y] = 1;
        }
        t = scan.nextInt();
        map = new HashMap<>();
        while (t-- > 0) {
            int x = scan.nextInt();
            char str = scan.next().charAt(0);
            map.put(x,str);
        }
        bfs(1,1);
        System.out.println(length+1);
    }
    public static void bfs(int x, int y) {
        Queue<Node> queue = new LinkedList<>();
        Queue<Node> snake = new LinkedList<>();

        queue.offer(new Node(x, y, 0));
        snake.offer(new Node(x, y));
        int dir = 1;
        int snailX = x;
        int snailY = y;
        while (!queue.isEmpty()) {
            Node now = queue.poll();
            int nx = now.x;
            int ny = now.y;
            int ntime = now.time;
            if (map.containsKey(ntime)) {
                char key = map.get(ntime);
                if (key == 'D') {
                    dir = setRight(dir);
                } else
                    dir = setLeft(dir);
                map.remove(ntime);
            }
            int qx = nx + dx[dir];
            int qy = ny + dy[dir];
            if (nx < 1 || ny < 1 || nx > n || ny > n) {
                length = ntime;
                break;
            }
            if (visit[qx][qy]) {
                length = ntime;
                break;
            }
            if (arr[nx][ny] == 0) {
                visit[snailX][snailY] = false;
                snake.poll();
                snake.offer(new Node(qx, qy));
                snailX = snake.peek().x;
                snailY = snake.peek().y;
            } else {
                arr[qx][qy] = 0;
                snake.offer(new Node(qx, qy));
            }
            visit[qx][qy] = true;
            queue.offer(new Node(qx, qy, ntime + 1));
        }
    }
    public static int setLeft ( int dir){
        switch (dir) {
            case 0:
                return 3;
            case 1:
                return 0;
            case 2:
                return 1;
            case 3:
                return 2;
        }
        return 0;
    }
    public static int setRight(int dir){
        switch(dir){
            case 0:
                return 1;
            case 1:
                return 2;
            case 2:
                return 3;
            case 3:
                return 0;
        }
        return 0;
    }
}
class Node{
    int x;
    int y;
    int time;
    Node(int x, int y){
        this.x = x;
        this.y = y;
    }
    Node(int x, int y, int time) {
        this.x = x;
        this.y = y;
        this.time = time;
    }
}
