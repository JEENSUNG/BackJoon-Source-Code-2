import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
public class Main{
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        LinkedList<Integer> list = new LinkedList<>();
        while(n--> 0) {
        	String[] s = br.readLine().split(" ");
        	switch(s[0]) {
        	case "push_back":
        		list.addLast(Integer.parseInt(s[1]));
        		break;
        	case "push_front":
        		list.addFirst(Integer.parseInt(s[1]));
        		break;
        	case "front":
        		if(list.isEmpty()) {
        			System.out.println(-1);
        			break;
        		}else {
        			System.out.println(list.getFirst());
        			break;
        		}
        	case "back":
        		if(list.isEmpty()) {
        			System.out.println(-1);
        			break;
        		}else {
        			System.out.println(list.getLast());
        			break;
        		}
        	case "size":
        		System.out.println(list.size());
        		break;
        	case "empty":
        		if(list.isEmpty()) {
        			System.out.println(1);
        			break;
        		}
        		else {
        			System.out.println(0);
        			break;
        		}
        	case "pop_front":
        		if(list.isEmpty()) {
        			System.out.println(-1);
        			break;
        		}else {
        			System.out.println(list.pollFirst());
        			break;
        		}
        	case "pop_back":
        		if(list.isEmpty()) {
        			System.out.println(-1);
        			break;
        		}else {
        			System.out.println(list.pollLast());
        			break;
        		}
        	}
        }
    }
}
